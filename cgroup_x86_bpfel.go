// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type cgroupCgroupevent struct {
	_        structs.HostLayout
	Path     [4096]int8
	Cgroupid uint64
}

// loadCgroup returns the embedded CollectionSpec for cgroup.
func loadCgroup() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CgroupBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load cgroup: %w", err)
	}

	return spec, err
}

// loadCgroupObjects loads cgroup and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*cgroupObjects
//	*cgroupPrograms
//	*cgroupMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCgroupObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadCgroup()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// cgroupSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cgroupSpecs struct {
	cgroupProgramSpecs
	cgroupMapSpecs
	cgroupVariableSpecs
}

// cgroupProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cgroupProgramSpecs struct {
	TraceCgroupMkdir *ebpf.ProgramSpec `ebpf:"trace_cgroup_mkdir"`
}

// cgroupMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cgroupMapSpecs struct {
	CgroupEvent     *ebpf.MapSpec `ebpf:"cgroup_event"`
	PerfCgroupEvent *ebpf.MapSpec `ebpf:"perf_cgroup_event"`
}

// cgroupVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type cgroupVariableSpecs struct {
}

// cgroupObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCgroupObjects or ebpf.CollectionSpec.LoadAndAssign.
type cgroupObjects struct {
	cgroupPrograms
	cgroupMaps
	cgroupVariables
}

func (o *cgroupObjects) Close() error {
	return _CgroupClose(
		&o.cgroupPrograms,
		&o.cgroupMaps,
	)
}

// cgroupMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCgroupObjects or ebpf.CollectionSpec.LoadAndAssign.
type cgroupMaps struct {
	CgroupEvent     *ebpf.Map `ebpf:"cgroup_event"`
	PerfCgroupEvent *ebpf.Map `ebpf:"perf_cgroup_event"`
}

func (m *cgroupMaps) Close() error {
	return _CgroupClose(
		m.CgroupEvent,
		m.PerfCgroupEvent,
	)
}

// cgroupVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadCgroupObjects or ebpf.CollectionSpec.LoadAndAssign.
type cgroupVariables struct {
}

// cgroupPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCgroupObjects or ebpf.CollectionSpec.LoadAndAssign.
type cgroupPrograms struct {
	TraceCgroupMkdir *ebpf.Program `ebpf:"trace_cgroup_mkdir"`
}

func (p *cgroupPrograms) Close() error {
	return _CgroupClose(
		p.TraceCgroupMkdir,
	)
}

func _CgroupClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed cgroup_x86_bpfel.o
var _CgroupBytes []byte
